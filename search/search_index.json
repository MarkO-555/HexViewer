{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"User Guide \ue157 Overview \ue157 Hex Viewer is a plugin for Sublime Text that allows the toggling of a file into a hex viewing mode. Hex Viewer also supports hex editing. Features \ue157 View any file (that exist on disk) in a hex format showing both byte and ASCII representation. Command to jump to a specific address. In place editing of bytes or ASCII chars. Highlight selected byte and ASCII code. Inspection panel showing different integer representation at the cursor position. Configurable display of byte grouping, bytes per line, endianness. Export hex view to a binary file. Get the checksum of a given file (various checksums are available). Generate checksum/hash from input via panel or text selection. Optionally auto convert binary to hex view. Commands \ue157 There are various commands available via the command palette or by key-bindings. Below outlines what the commands are and what they do. HexViewer: Toggle Hex View \ue157 Toggles file in or out of hex view. HexViewer: Reload Hex View \ue157 Reloads the current hex view. All edits will be lost. HexViewer: Show Hex Inspector \ue157 Show the Hex Inspector panel. The Hex Inspector is a panel which shows the current selected byte as different unit types. Name Signed Bits Byte Unsigned 8 Short Signed 8 Word Unsigned 16 Int Signed 16 Dword Unsigned 32 LongInt Signed 32 Qword Unsigned 64 LongLongInt Signed 64 Float Signed 32 Double Signed 64 Binary NA 8 HexViewer: Toggle Endiannes (Big|Little) \ue157 Toggles the parsing of bytes to big or little endian when showing unit types in Hex Inspector. HexViewer: Set Bits Per Group \ue157 Allows selection from the quick panel the grouping of bytes by 8, 16, 32, 64, and 128 bits. This will reload the file with this formatting. All edits will be lost, so export your changes before you do this. HexViewer: Set Bytes Per Line \ue157 Allows selection from the quick panel the number of bytes to be shown on a line (allowed options are defined in valid_bytes_per_line ). HexViewer: Go to Offset \ue157 Moves the cursor to the given offset (address). Input is received through the input panel. HexViewer: Show Hex Edit Panel \ue157 Invoking this command will take the currently selected bytes on a line and display them in an input panel. They can then be modified and submitted to replace the original bytes. Strings can also be used by using the s: prefix followed by the equivalent ASCII characters that are to replace the selected bytes. HexViewer: Discard All Edits \ue157 If at any time you would like to discard all of the changes you have currently made to the hex view, you can invoke this command and a clean hex view will be reloaded. HexViewer: Export Bin \ue157 Exports the current hex view to a binary file. HexViewer: Run Checksum \ue157 By default, it opens up a quick panel with all available hashes that can be used as a checksum. When an algorithm is selected, it is used to retrieve the checksum for the current file in hex view mode. HexViewer: Generate Hash \ue157 Shows a quick panel allowing you to select the desired hash, and then shows an input panel that allows you to specify the string to be hashed. A panel is then displayed with your generated hash according to the selected specifications. HexViewer: Generate Hash from Selection \ue157 Allows you to generate hashes from your current selection(s). Multi-select regions' content will be combined and evaluated together. If a region contains newlines, they will be hashed as well. HexViewer: Abort (Hex Conversion|Export|Checksum) \ue157 Abort the given action. HexViewer: Open in External Viewer \ue157 Opens the current binary file in an external hex editor. Configurable settings \ue157 Settings are configurable in the hex_viewer.sublime-settings file. group_bytes_by_bits \ue157 Groups together the bytes by the number of bits. Valid numbers are must be divisible by bytes and currently go up to 128 bits. // Group bytes together by bits // Valid Settings (8|16|32|64|128) \"group_bytes_by_bits\" : 16 , valid_bytes_per_line \ue157 Sets the number of valid bytes that will be allowed for the valid_bytes_per_line . Keep in mind though that just be because a value is deemed valid here, there are still some restriction that are covered in bytes_per_line . // These are the valid bytes per line options \"valid_bytes_per_line\" : [ 8 , 10 , 16 , 24 , 32 , 48 , 64 , 128 , 256 , 512 ], bytes_per_line \ue157 Number of bytes that will be shown on a line. Can be any value found in valid_bytes_per_line . Even if the value is valid, there are some things to be aware of. HexViewer will default to a more reasonable value if the following does not hold true bytes_per_line / (group_bytes_by_bits / 8) == 0 ; if this does not hold true, there will be an adjustment made to the final number of bytes per line. // Number of 8 bit bytes per line. // See \"valid_bytes_per_line\" for valid options \"bytes_per_line\" : 24 , use_lowercase_hex \ue157 Controls whether hex values are displayed with lowercase or uppercase characters. // Use lowercase hex values. \"use_lowercase_hex\" : true , custom_font \ue157 Sets the font used in a HexViewer view. It is strongly recommended to set this to a monospaced font if your default font is not monospaced. // Use None to use the current Sublime Text font. \"custom_font\" : \"none\" , custom_font_size \ue157 Sets the font size to be used in a HexViewer view. // Use zero to use the current Sublime Text font size. \"custom_font_size\" : 0 , inspector \ue157 Sets whether the Hex Inspector panel is enabled. To have the Hex Inspector panel auto-open when a HexViewer view loads, see inspector_auto_show . // Show inspector panel \"inspector\" : true , inspector_endian \ue157 Sets the endianness of the displayed values in the inspector. The string value of big and little can be used. // endian? (big|little) \"inspector_endian\" : \"big\" , inspector_auto_show \ue157 Sets whether the Hex Inspector panel will auto-show on HexViewer view load. If this is disabled, the Hex Inspector panel can still be shown manually when desired. // Show inspector panel on hex view load and hide on hex view hide \"inspector_auto_show\" : true , inspector_integer_format \ue157 Controls the text format for integer output in the inspector panel. Uses standard python string formatting. // Inspector format strings: ints and unsigned ints \"inspector_integer_format\" : \"%-12s: %-22d\" , inspector_float_format \ue157 Controls the text format for float output in the inspector panel. Uses standard python string formatting. // Inspector format strings: floating point decimals \"inspector_float_format\" : \"%-12s: %-22e\" , inspector_double_format \ue157 Controls the text format for double output in the inspector panel. Uses standard python string formatting. // Inspector format strings: double floating point decimal strings \"inspector_double_format\" : \"%-12s: %-22e\" , inspector_missing/bad_format \ue157 Controls the text format for missing/bad output in the inspector panel. Uses standard python string formatting. // Inspector format strings: \"NAN\" and not enough bytes to show numbers \"--\" \"inspector_missing/bad_format\" : \"%-12s: %-22s\" , inspector_binary_format \ue157 Controls the text format for binary output in the inspector panel. Uses standard python string formatting. // Binary number formatting \"inspector_binary_format\" : \"%-12s: %-22s\" inspector_timestamp_format \ue157 Controls the text format for the timestamp output in the inspector panel. Timestamp format is configured with two parts: the general string formatting, and the time output which is fed into the string format as the second parameter. Time format uses Python's strftime . // Timestamp format \"inspector_timestamp_format\" : [ \"%-12s: %-22s\" , \"%c\" ] enable_fake_hex_file \ue157 When loading a file that is a HexViewer visual representation of a binary file, and the syntax is set to HexViewer's custom syntax, HexViewer will enable basic byte highlight features, Hex Inspector panel etc. // Treat files in HexViewer syntax with proper format // (usually .hxv files; saved versions of hex output) // as real hex views. The following functionality will be omitted: // hex toggle, editing, writing to file, // and dynamic changing of bits and bytes functionality. // Address searching, Hex inspector, etc. should work fine. \"enable_fake_hex_file\" : true , highlight_max_bytes \ue157 Sets the max number of allowed bytes that HexViewer will highlight when selected. This is a setting that limits the highlight for the sake of performance. Keep this set to a reasonable value. // Approximate max byte selection. // The highlighter will highlight individual selections until // the max number of bytes is found. The selection containing // the maximum byte will still be finished even if it has more // bytes than the max. \"highlight_max_bytes\" : 1000 , prompt_on_file_too_big \ue157 Prompts the user with a dialog that gives the user the option to bypass the default action. By default HexViewer cancels rendering a hex view if the file is too big; or, if an external viewer is configured, HexViewer will open the binary file in the configured external viewer. This option gives the user the ability to conditionally override the default action and render the hex viewer tab despite file size being too large. // If the file is too large (as defined in the settings file via 'max_file_size_kb'), // prompt the user with a dialog asking whether they would like to open the file internally anyways // or use the default action (open in external viewer defined in 'external viewer' or terminate action // if 'external_viewer' is not set or invalid). \"prompt_on_file_too_big\" : false , highlight_throttle \ue157 Sets whether highlight_max_bytes will be used. This allows a user to not limit the number of highlighted bytes. It is not recommended to use this for performances sake. //Enable highlight throttling \"highlight_throttle\" : false , highlight_scope \ue157 Define the highlight color when a byte or ASCII char is selected. Colors must be a scope found in your theme file, if not, the color will be the default font color. // Scope? (Defined in theme files.) // Examples: (keyword|string|number) \"highlight_scope\" : \"string\" , highlight_scope \ue157 Define the highlight color for bytes that have been edited. Colors must be a scope found in your theme file, if not, the color will be the default font color. \"highlight_edit_scope\" : \"keyword\" , highlight_icon \ue157 Sets a gutter icon for highlighted bytes. Default is set to the string none to hide the icon. This can be changed to either dot , circle , bookmark , cross , or none . // Icon? (dot|circle|bookmark|cross|none) \"highlight_icon\" : \"none\" , highlight_edit_icon \ue157 Sets a gutter icon for edited bytes. Default is set to the string none to hide the icon. This can be changed to either dot , circle , bookmark , cross , none . \"highlight_edit_icon\" : \"none\" , highlight_style \ue157 Sets the highlight style for highlighted bytes. Can be solid , outline , underline , or none . // Style? (solid|outline|underline|none) \"highlight_style\" : \"solid\" , highlight_edit_style \ue157 Sets the highlight style for edited bytes. Can be solid , outline , underline , or none . \"highlight_edit_style\" : \"underline\" , max_file_size_kb \ue157 Sets a limit for how big of a binary file HexViewer will try and convert to a HexView. Size is in Kilobytes. // Maximum allowed byte size that HexViewer will parse \"max_file_size_kb\" : 50000.0 , external_viewer \ue157 Sometimes it may be desired to open a hex view in an external editor. Due to the nature of the Sublime Text API, HexViewer's options and speed can be limited, so it can be advantageous to open a file in an external hex editor when performing certain actions or dealing with very large files. external_viewer allows the configuring of the external hex editor. external_viewer is a dictionary containing to parameters. viewer , which is an absolute path to the the external hex editor. args are the arguments that will be passed to the external editor; it is an array of string arguments. You can use ${FILE} has a place holder for the file path that will be sent to the editor. HexViewer will insert the actual file path in the place of ${FILE} . // External Hex Viewer if max size is exceeded. // Viewer should be the absolute path. // Args is an array of command line arguments. Use ${FILE} for the file path. \"external_viewer\" : { \"viewer\" : \"\" , \"args\" : [ \"${FILE}\" ] }, hash_algorithm \ue157 The default checksum algorithm to use when creating a hash or checksum (not all values listed below will be found on every platform and system). // Checksum algorithm default? (the default is what is applied to a file when saving) // (mdc2|md4|md5|sha|sha1|sha224|sha256|sha384|sha512|ripemd160|crc32|adler32) \"hash_algorithm\" : \"md5\" , checksum_on_save \ue157 Controls whether HexViewer will checksum the binary file on save/export. // Enable checksum on save \"checksum_on_save\" : true , auto_open \ue157 Sets whether HexViewer should auto detect binary files and convert them to HexViewer views. When enabled, HexViewer will detect when a view is set to the Hexidecimal syntax, or if the file name matches the auto_open_patterns found below. // Auto open binary files in hex viewer // Detects if view has encoding set to 'Hexidecimal'. // Additionally it can use 'auto_open_patterns' below. \"auto_open\" : false , auto_open_patterns \ue157 When auto_open is enabled, HexViewer will use the following list of file patterns to detect binary files for auto conversion. // Auto open patterns to open in hex viewer \"auto_open_patterns\" : [ \"*.bin\" , \"*.pyc\" ], disable_auto_open_hex_encoding \ue157 Sets whether auto_open will convert views with the Hexidecimal syntax. // Disable auto open based on 'Hexidecimal' encoding \"disable_auto_open_hex_encoding\" : false , use_sub_notify \ue157 Enables use of SubNotify notifications. // Use sub notify if available \"use_sub_notify\" : true ,","title":"User Guide"},{"location":"#user-guide","text":"","title":"User Guide"},{"location":"#overview","text":"Hex Viewer is a plugin for Sublime Text that allows the toggling of a file into a hex viewing mode. Hex Viewer also supports hex editing.","title":"Overview"},{"location":"#features","text":"View any file (that exist on disk) in a hex format showing both byte and ASCII representation. Command to jump to a specific address. In place editing of bytes or ASCII chars. Highlight selected byte and ASCII code. Inspection panel showing different integer representation at the cursor position. Configurable display of byte grouping, bytes per line, endianness. Export hex view to a binary file. Get the checksum of a given file (various checksums are available). Generate checksum/hash from input via panel or text selection. Optionally auto convert binary to hex view.","title":"Features"},{"location":"#commands","text":"There are various commands available via the command palette or by key-bindings. Below outlines what the commands are and what they do.","title":"Commands"},{"location":"#hexviewer-toggle-hex-view","text":"Toggles file in or out of hex view.","title":"HexViewer: Toggle Hex View"},{"location":"#hexviewer-reload-hex-view","text":"Reloads the current hex view. All edits will be lost.","title":"HexViewer: Reload Hex View"},{"location":"#hexviewer-show-hex-inspector","text":"Show the Hex Inspector panel. The Hex Inspector is a panel which shows the current selected byte as different unit types. Name Signed Bits Byte Unsigned 8 Short Signed 8 Word Unsigned 16 Int Signed 16 Dword Unsigned 32 LongInt Signed 32 Qword Unsigned 64 LongLongInt Signed 64 Float Signed 32 Double Signed 64 Binary NA 8","title":"HexViewer: Show Hex Inspector"},{"location":"#hexviewer-toggle-endiannes-biglittle","text":"Toggles the parsing of bytes to big or little endian when showing unit types in Hex Inspector.","title":"HexViewer: Toggle Endiannes (Big|Little)"},{"location":"#hexviewer-set-bits-per-group","text":"Allows selection from the quick panel the grouping of bytes by 8, 16, 32, 64, and 128 bits. This will reload the file with this formatting. All edits will be lost, so export your changes before you do this.","title":"HexViewer: Set Bits Per Group"},{"location":"#hexviewer-set-bytes-per-line","text":"Allows selection from the quick panel the number of bytes to be shown on a line (allowed options are defined in valid_bytes_per_line ).","title":"HexViewer: Set Bytes Per Line"},{"location":"#hexviewer-go-to-offset","text":"Moves the cursor to the given offset (address). Input is received through the input panel.","title":"HexViewer: Go to Offset"},{"location":"#hexviewer-show-hex-edit-panel","text":"Invoking this command will take the currently selected bytes on a line and display them in an input panel. They can then be modified and submitted to replace the original bytes. Strings can also be used by using the s: prefix followed by the equivalent ASCII characters that are to replace the selected bytes.","title":"HexViewer: Show Hex Edit Panel"},{"location":"#hexviewer-discard-all-edits","text":"If at any time you would like to discard all of the changes you have currently made to the hex view, you can invoke this command and a clean hex view will be reloaded.","title":"HexViewer: Discard All Edits"},{"location":"#hexviewer-export-bin","text":"Exports the current hex view to a binary file.","title":"HexViewer: Export Bin"},{"location":"#hexviewer-run-checksum","text":"By default, it opens up a quick panel with all available hashes that can be used as a checksum. When an algorithm is selected, it is used to retrieve the checksum for the current file in hex view mode.","title":"HexViewer: Run Checksum"},{"location":"#hexviewer-generate-hash","text":"Shows a quick panel allowing you to select the desired hash, and then shows an input panel that allows you to specify the string to be hashed. A panel is then displayed with your generated hash according to the selected specifications.","title":"HexViewer: Generate Hash"},{"location":"#hexviewer-generate-hash-from-selection","text":"Allows you to generate hashes from your current selection(s). Multi-select regions' content will be combined and evaluated together. If a region contains newlines, they will be hashed as well.","title":"HexViewer: Generate Hash from Selection"},{"location":"#hexviewer-abort-hex-conversionexportchecksum","text":"Abort the given action.","title":"HexViewer: Abort (Hex Conversion|Export|Checksum)"},{"location":"#hexviewer-open-in-external-viewer","text":"Opens the current binary file in an external hex editor.","title":"HexViewer: Open in External Viewer"},{"location":"#configurable-settings","text":"Settings are configurable in the hex_viewer.sublime-settings file.","title":"Configurable settings"},{"location":"#group_bytes_by_bits","text":"Groups together the bytes by the number of bits. Valid numbers are must be divisible by bytes and currently go up to 128 bits. // Group bytes together by bits // Valid Settings (8|16|32|64|128) \"group_bytes_by_bits\" : 16 ,","title":"group_bytes_by_bits"},{"location":"#valid_bytes_per_line","text":"Sets the number of valid bytes that will be allowed for the valid_bytes_per_line . Keep in mind though that just be because a value is deemed valid here, there are still some restriction that are covered in bytes_per_line . // These are the valid bytes per line options \"valid_bytes_per_line\" : [ 8 , 10 , 16 , 24 , 32 , 48 , 64 , 128 , 256 , 512 ],","title":"valid_bytes_per_line"},{"location":"#bytes_per_line","text":"Number of bytes that will be shown on a line. Can be any value found in valid_bytes_per_line . Even if the value is valid, there are some things to be aware of. HexViewer will default to a more reasonable value if the following does not hold true bytes_per_line / (group_bytes_by_bits / 8) == 0 ; if this does not hold true, there will be an adjustment made to the final number of bytes per line. // Number of 8 bit bytes per line. // See \"valid_bytes_per_line\" for valid options \"bytes_per_line\" : 24 ,","title":"bytes_per_line"},{"location":"#use_lowercase_hex","text":"Controls whether hex values are displayed with lowercase or uppercase characters. // Use lowercase hex values. \"use_lowercase_hex\" : true ,","title":"use_lowercase_hex"},{"location":"#custom_font","text":"Sets the font used in a HexViewer view. It is strongly recommended to set this to a monospaced font if your default font is not monospaced. // Use None to use the current Sublime Text font. \"custom_font\" : \"none\" ,","title":"custom_font"},{"location":"#custom_font_size","text":"Sets the font size to be used in a HexViewer view. // Use zero to use the current Sublime Text font size. \"custom_font_size\" : 0 ,","title":"custom_font_size"},{"location":"#inspector","text":"Sets whether the Hex Inspector panel is enabled. To have the Hex Inspector panel auto-open when a HexViewer view loads, see inspector_auto_show . // Show inspector panel \"inspector\" : true ,","title":"inspector"},{"location":"#inspector_endian","text":"Sets the endianness of the displayed values in the inspector. The string value of big and little can be used. // endian? (big|little) \"inspector_endian\" : \"big\" ,","title":"inspector_endian"},{"location":"#inspector_auto_show","text":"Sets whether the Hex Inspector panel will auto-show on HexViewer view load. If this is disabled, the Hex Inspector panel can still be shown manually when desired. // Show inspector panel on hex view load and hide on hex view hide \"inspector_auto_show\" : true ,","title":"inspector_auto_show"},{"location":"#inspector_integer_format","text":"Controls the text format for integer output in the inspector panel. Uses standard python string formatting. // Inspector format strings: ints and unsigned ints \"inspector_integer_format\" : \"%-12s: %-22d\" ,","title":"inspector_integer_format"},{"location":"#inspector_float_format","text":"Controls the text format for float output in the inspector panel. Uses standard python string formatting. // Inspector format strings: floating point decimals \"inspector_float_format\" : \"%-12s: %-22e\" ,","title":"inspector_float_format"},{"location":"#inspector_double_format","text":"Controls the text format for double output in the inspector panel. Uses standard python string formatting. // Inspector format strings: double floating point decimal strings \"inspector_double_format\" : \"%-12s: %-22e\" ,","title":"inspector_double_format"},{"location":"#inspector_missingbad_format","text":"Controls the text format for missing/bad output in the inspector panel. Uses standard python string formatting. // Inspector format strings: \"NAN\" and not enough bytes to show numbers \"--\" \"inspector_missing/bad_format\" : \"%-12s: %-22s\" ,","title":"inspector_missing/bad_format"},{"location":"#inspector_binary_format","text":"Controls the text format for binary output in the inspector panel. Uses standard python string formatting. // Binary number formatting \"inspector_binary_format\" : \"%-12s: %-22s\"","title":"inspector_binary_format"},{"location":"#inspector_timestamp_format","text":"Controls the text format for the timestamp output in the inspector panel. Timestamp format is configured with two parts: the general string formatting, and the time output which is fed into the string format as the second parameter. Time format uses Python's strftime . // Timestamp format \"inspector_timestamp_format\" : [ \"%-12s: %-22s\" , \"%c\" ]","title":"inspector_timestamp_format"},{"location":"#enable_fake_hex_file","text":"When loading a file that is a HexViewer visual representation of a binary file, and the syntax is set to HexViewer's custom syntax, HexViewer will enable basic byte highlight features, Hex Inspector panel etc. // Treat files in HexViewer syntax with proper format // (usually .hxv files; saved versions of hex output) // as real hex views. The following functionality will be omitted: // hex toggle, editing, writing to file, // and dynamic changing of bits and bytes functionality. // Address searching, Hex inspector, etc. should work fine. \"enable_fake_hex_file\" : true ,","title":"enable_fake_hex_file"},{"location":"#highlight_max_bytes","text":"Sets the max number of allowed bytes that HexViewer will highlight when selected. This is a setting that limits the highlight for the sake of performance. Keep this set to a reasonable value. // Approximate max byte selection. // The highlighter will highlight individual selections until // the max number of bytes is found. The selection containing // the maximum byte will still be finished even if it has more // bytes than the max. \"highlight_max_bytes\" : 1000 ,","title":"highlight_max_bytes"},{"location":"#prompt_on_file_too_big","text":"Prompts the user with a dialog that gives the user the option to bypass the default action. By default HexViewer cancels rendering a hex view if the file is too big; or, if an external viewer is configured, HexViewer will open the binary file in the configured external viewer. This option gives the user the ability to conditionally override the default action and render the hex viewer tab despite file size being too large. // If the file is too large (as defined in the settings file via 'max_file_size_kb'), // prompt the user with a dialog asking whether they would like to open the file internally anyways // or use the default action (open in external viewer defined in 'external viewer' or terminate action // if 'external_viewer' is not set or invalid). \"prompt_on_file_too_big\" : false ,","title":"prompt_on_file_too_big"},{"location":"#highlight_throttle","text":"Sets whether highlight_max_bytes will be used. This allows a user to not limit the number of highlighted bytes. It is not recommended to use this for performances sake. //Enable highlight throttling \"highlight_throttle\" : false ,","title":"highlight_throttle"},{"location":"#highlight_scope","text":"Define the highlight color when a byte or ASCII char is selected. Colors must be a scope found in your theme file, if not, the color will be the default font color. // Scope? (Defined in theme files.) // Examples: (keyword|string|number) \"highlight_scope\" : \"string\" ,","title":"highlight_scope"},{"location":"#highlight_scope_1","text":"Define the highlight color for bytes that have been edited. Colors must be a scope found in your theme file, if not, the color will be the default font color. \"highlight_edit_scope\" : \"keyword\" ,","title":"highlight_scope"},{"location":"#highlight_icon","text":"Sets a gutter icon for highlighted bytes. Default is set to the string none to hide the icon. This can be changed to either dot , circle , bookmark , cross , or none . // Icon? (dot|circle|bookmark|cross|none) \"highlight_icon\" : \"none\" ,","title":"highlight_icon"},{"location":"#highlight_edit_icon","text":"Sets a gutter icon for edited bytes. Default is set to the string none to hide the icon. This can be changed to either dot , circle , bookmark , cross , none . \"highlight_edit_icon\" : \"none\" ,","title":"highlight_edit_icon"},{"location":"#highlight_style","text":"Sets the highlight style for highlighted bytes. Can be solid , outline , underline , or none . // Style? (solid|outline|underline|none) \"highlight_style\" : \"solid\" ,","title":"highlight_style"},{"location":"#highlight_edit_style","text":"Sets the highlight style for edited bytes. Can be solid , outline , underline , or none . \"highlight_edit_style\" : \"underline\" ,","title":"highlight_edit_style"},{"location":"#max_file_size_kb","text":"Sets a limit for how big of a binary file HexViewer will try and convert to a HexView. Size is in Kilobytes. // Maximum allowed byte size that HexViewer will parse \"max_file_size_kb\" : 50000.0 ,","title":"max_file_size_kb"},{"location":"#external_viewer","text":"Sometimes it may be desired to open a hex view in an external editor. Due to the nature of the Sublime Text API, HexViewer's options and speed can be limited, so it can be advantageous to open a file in an external hex editor when performing certain actions or dealing with very large files. external_viewer allows the configuring of the external hex editor. external_viewer is a dictionary containing to parameters. viewer , which is an absolute path to the the external hex editor. args are the arguments that will be passed to the external editor; it is an array of string arguments. You can use ${FILE} has a place holder for the file path that will be sent to the editor. HexViewer will insert the actual file path in the place of ${FILE} . // External Hex Viewer if max size is exceeded. // Viewer should be the absolute path. // Args is an array of command line arguments. Use ${FILE} for the file path. \"external_viewer\" : { \"viewer\" : \"\" , \"args\" : [ \"${FILE}\" ] },","title":"external_viewer"},{"location":"#hash_algorithm","text":"The default checksum algorithm to use when creating a hash or checksum (not all values listed below will be found on every platform and system). // Checksum algorithm default? (the default is what is applied to a file when saving) // (mdc2|md4|md5|sha|sha1|sha224|sha256|sha384|sha512|ripemd160|crc32|adler32) \"hash_algorithm\" : \"md5\" ,","title":"hash_algorithm"},{"location":"#checksum_on_save","text":"Controls whether HexViewer will checksum the binary file on save/export. // Enable checksum on save \"checksum_on_save\" : true ,","title":"checksum_on_save"},{"location":"#auto_open","text":"Sets whether HexViewer should auto detect binary files and convert them to HexViewer views. When enabled, HexViewer will detect when a view is set to the Hexidecimal syntax, or if the file name matches the auto_open_patterns found below. // Auto open binary files in hex viewer // Detects if view has encoding set to 'Hexidecimal'. // Additionally it can use 'auto_open_patterns' below. \"auto_open\" : false ,","title":"auto_open"},{"location":"#auto_open_patterns","text":"When auto_open is enabled, HexViewer will use the following list of file patterns to detect binary files for auto conversion. // Auto open patterns to open in hex viewer \"auto_open_patterns\" : [ \"*.bin\" , \"*.pyc\" ],","title":"auto_open_patterns"},{"location":"#disable_auto_open_hex_encoding","text":"Sets whether auto_open will convert views with the Hexidecimal syntax. // Disable auto open based on 'Hexidecimal' encoding \"disable_auto_open_hex_encoding\" : false ,","title":"disable_auto_open_hex_encoding"},{"location":"#use_sub_notify","text":"Enables use of SubNotify notifications. // Use sub notify if available \"use_sub_notify\" : true ,","title":"use_sub_notify"},{"location":"contributing/","text":"Contributing & Support \ue157 Overview \ue157 Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward by me. Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch. I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests. Bug Reports \ue157 Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->HexViewer->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code \ue157 Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Pull Requests \ue157 Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge. Running Validation Tests \ue157 Tip If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 . Documentation Improvements \ue157 A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Contributing &amp; Support"},{"location":"contributing/#contributing--support","text":"","title":"Contributing &amp; Support"},{"location":"contributing/#overview","text":"Sublime Versions Description ST2 Supported on a separate branch, but not actively. Any further fixes or enhancements must come from the community. Issues for versions less than ST3 will not be addressed moving forward by me. Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch. I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. Contribution from the community is encouraged and can be done in a variety of ways: Bug reports. Reviewing code. Code patches via pull requests. Documentation improvements via pull requests.","title":"Overview"},{"location":"contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try to find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Provide environment information by running Preferences->Package Settings->HexViewer->Support Info . The information will be copied to the clipboard; paste the info in issue. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format as well for easy copy/paste. The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"contributing/#pull-requests","text":"Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of. Please describe the change in as much detail as possible so I can understand what is being added or modified. If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved). Please reference and link related open bugs or feature requests in this pull if applicable. Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of. I will not accept new features or changes to existing features if you have not provided documentation describing the feature. Continuous integration tests on are run on all pull requests and commits via Travis CI. When making a pull request, the tests will automatically be run, and the request must pass to be accepted. You can (and should) run these tests before pull requesting. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.","title":"Pull Requests"},{"location":"contributing/#running-validation-tests","text":"Tip If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below): chmod +x run_tests.sh ./run_tests.sh There are a couple of dependencies that must be present before running the tests. As ST3 is the only current, actively supported version, Python 3 must be used to validate the tests. Unit tests are run with pytest ( pytest-dev/pytest ). You can install pytest via: pip install pytest The tests should be run from the root folder of the plugin by using the following command: py.test . Linting is performed on the entire project with the following modules: pycqa/flake8 pycqa/flake8-docstrings ebeweber/flake8-mutable gforcada/flake8-builtins pycqa/pep8-naming These can be installed via: pip install flake8 pip install flake8-docstrings pip install flake8-mutable pip install flake8-builtins pip install pep8-naming Linting is performed with the following command: flake8 .","title":"Running Validation Tests"},{"location":"contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation. Help with documentation is always appreciated and can be done via pull requests. There shouldn't be any need to run validation tests if only updating documentation. You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of mkdocs/mkdocs , the squidfunk/mkdocs-material , and facelessuser/pymdown-extensions to render the docs. You can preview the docs if you install these two packages. The command for previewing the docs is mkdocs serve from the root directory. You can then view the documents at localhost:8000 .","title":"Documentation Improvements"},{"location":"installation/","text":"Installation \ue157 Package Control \ue157 The recommended way to install HexViewer is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (OSX) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing HexViewer ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy! Manual Installation \ue157 Warning This is not the recommended way to install HexViewer for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone HexViewer and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install HexViewer without package control, here are the steps. It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack, or git clone, the latest HexViewer release and unpack as HexViewer : facelessuser/HexViewer -> HexViewer Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy. Git Cloning \ue157 Quit Sublime Text. Open a terminal and enter the following. For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/HexViewer.git HexViewer Restart Sublime Text.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#package-control","text":"The recommended way to install HexViewer is via Package Control . Package Control will install the correct branch on your system and keep it up to date. Ensure Package Control is installed. Instructions are found here . In Sublime Text, press Ctrl \uff0b Shift \uff0b P (Win, Linux) or Cmd \uff0b Shift \uff0b P (OSX) to bring up the quick panel and start typing Package Control: Install Package . Select the command and it will show a list of installable plugins. Start typing HexViewer ; when you see it, select it. Restart to be sure everything is loaded proper. Enjoy!","title":"Package Control"},{"location":"installation/#manual-installation","text":"Warning This is not the recommended way to install HexViewer for the average user. Installing this way will not get automatically updated. If you are forking for a pull request, you should just clone HexViewer and run Package Control's Satisfy Dependency command to get all the dependencies. For those who want to install HexViewer without package control, here are the steps. It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so. When going this route, you will have to keep all the packages updated yourself. Download the latest releases of the following dependencies and unpack or git clone in the Packages folder as shown below: teddy_beer_maniac/sublime-text-dependency-markupsafe -> markupsafe teddy_beer_maniac/sublime-text-dependency-jinja2 -> python-jinja2 packagecontrol/pygments -> pygments facelessuser/sublime-markdown-popups -> mdpopups facelessuser/sublime-markdown -> python-markdown Download and unpack, or git clone, the latest HexViewer release and unpack as HexViewer : facelessuser/HexViewer -> HexViewer Create a folder under Packages called 00-dependencies and under that folder create a file called 00-dependencies.py : Copy the following code to 00-dependencies.py (this code was taken from Package Control): import sys import os from os.path import dirname if os . name == 'nt' : from ctypes import windll , create_unicode_buffer import sublime if sys . version_info >= ( 3 ,): def decode ( path ): return path def encode ( path ): return path if os . path . basename ( __file__ ) == 'sys_path.py' : pc_package_path = dirname ( dirname ( __file__ )) # When loaded as a .sublime-package file, the filename ends up being # Package Control.sublime-package/Package Control.package_control.sys_path else : pc_package_path = dirname ( __file__ ) st_version = u '3' else : def decode ( path ): if not isinstance ( path , unicode ): path = path . decode ( sys . getfilesystemencoding ()) return path def encode ( path ): if isinstance ( path , unicode ): path = path . encode ( sys . getfilesystemencoding ()) return path pc_package_path = decode ( os . getcwd ()) st_version = u '2' st_dir = dirname ( dirname ( pc_package_path )) def add ( path , first = False ): \"\"\" Adds an entry to the beginning of sys.path, working around the fact that Python 2.6 can't import from non-ASCII paths on Windows. :param path: A unicode string of a folder, zip file or sublime-package file to add to the path :param first: If the path should be added at the beginning \"\"\" if os . name == 'nt' : # Work around unicode path import issue on Windows with Python 2.6 buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value enc_path = encode ( path ) if os . path . exists ( enc_path ): if first : try : sys . path . remove ( enc_path ) except ( ValueError ): pass sys . path . insert ( 0 , enc_path ) elif enc_path not in sys . path : sys . path . append ( enc_path ) def remove ( path ): \"\"\" Removes a path from sys.path if it is present :param path: A unicode string of a folder, zip file or sublime-package file \"\"\" try : sys . path . remove ( encode ( path )) except ( ValueError ): pass if os . name == 'nt' : buf = create_unicode_buffer ( 512 ) if windll . kernel32 . GetShortPathNameW ( path , buf , len ( buf )): path = buf . value try : sys . path . remove ( encode ( path )) except ( ValueError ): pass def generate_dependency_paths ( name ): \"\"\" Accepts a dependency name and generates a dict containing the three standard import paths that are valid for the current machine. :param name: A unicode string name of the dependency :return: A dict with the following keys: - 'ver' - 'plat' - 'arch' \"\"\" packages_dir = os . path . join ( st_dir , u 'Packages' ) dependency_dir = os . path . join ( packages_dir , name ) ver = u 'st %s ' % st_version plat = sublime . platform () arch = sublime . arch () return { 'all' : os . path . join ( dependency_dir , 'all' ), 'ver' : os . path . join ( dependency_dir , ver ), 'plat' : os . path . join ( dependency_dir , u ' %s _ %s ' % ( ver , plat )), 'arch' : os . path . join ( dependency_dir , u ' %s _ %s _ %s ' % ( ver , plat , arch )) } def add_dependency ( name , first = False ): \"\"\" Accepts a dependency name and automatically adds the appropriate path to sys.path, if the dependency has a path for the current platform and architecture. :param name: A unicode string name of the dependency :param first: If the path should be added to the beginning of the list \"\"\" dep_paths = generate_dependency_paths ( name ) for path in dep_paths . values (): if os . path . exists ( encode ( path )): add ( path , first = first ) add_dependency ( 'pygments' ) add_dependency ( 'markupsafe' ) add_dependency ( 'python-markdown' ) add_dependency ( 'python-jinja2' ) add_dependency ( 'mdpopups' ) Restart and enjoy.","title":"Manual Installation"},{"location":"installation/#git-cloning","text":"Quit Sublime Text. Open a terminal and enter the following. For dependencies, replace the URL with the appropriate URL, and the appropriate folder to check it out to: cd /path/to/Sublime Text 3/Packages git clone https://github.com/facelessuser/HexViewer.git HexViewer Restart Sublime Text.","title":"Git Cloning"},{"location":"license/","text":"License \ue157 Hex Viewer is released under the MIT license. Copyright \u00a9 2011 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"Hex Viewer is released under the MIT license. Copyright \u00a9 2011 - 2020 Isaac Muse isaacmuse@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"_snippets/abbr/","text":"","title":"Abbr"},{"location":"_snippets/links/","text":"","title":"Links"},{"location":"_snippets/refs/","text":"","title":"Refs"}]}